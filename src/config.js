export const API_ROOT = (process.env.NODE_ENV === 'production')
			? 'http://seed2.antshares.org:10332'
			:'http://seed2.antshares.org:10332'

export const CookieDomain = (process.env.NODE_ENV === 'production')
			? '.jackhu.top'
			:''

export const languageDict = {
  "csharp": "00",
  "java": "01",
  "solidity": "02"
}
export const examples_config = {"csharp":
	[{
		name: "Example",
		context: [
				'using AntShares.SmartContract.Framework;',
				'using AntShares.SmartContract.Framework.Services.AntShares;',
				'using AntShares.SmartContract.Framework.Services.System;',
				'',
				'public class HelloWorld : FunctionCode',
				'{',
				'    public static void Main()',
				'    {',
				'        Storage.Put(Storage.CurrentContext, "Hello", "World");',
				'    }',
				'}',
		].join('\n'),
	},
	{
		name: "Lock",
		context: [
				'using AntShares.SmartContract.Framework;',
				'using AntShares.SmartContract.Framework.Services.AntShares;',
				'using AntShares.SmartContract.Framework.Services.System;',
				'',
				'public class Lock : FunctionCode',
				'{',
				'    public static bool Main(uint timestamp, byte[] pubkey, byte[] signature)',
				'    {',
				'        Header header = Blockchain.GetHeader(Blockchain.GetHeight());',
				'			   if (timestamp > header.Timestamp) return false;',
				'			   return VerifySignature(pubkey, signature);',
				'    }',
				'}',
		].join('\n'),
	},
	{
		name: "Domain",
		context: [
				'using AntShares.SmartContract.Framework;',
				'using AntShares.SmartContract.Framework.Services.AntShares;',
				'using AntShares.SmartContract.Framework.Services.System;',
				'',
				'public class Lock : FunctionCode',
				'{',
				'     public static object Main(string operation, params object[] args)',
				'     {',
				'        switch (operation)',
				'			   {',
		    '			   	  case "query":',
				'			   	 		return Query((string)args[0]);',
				'			   	  case "register":',
			  '			   	 		return Register((string)args[0], (byte[])args[1], (byte[])args[2]);',
				'			   	  case "transfer":',
			  '			   	 		return Transfer((string)args[0], (byte[])args[1], (byte[])args[2], (byte[])args[2]);',
				'			   	  case "delete":',
			  '			   	 		return Delete((string)args[0], (byte[])args[1]);',
				'			   	  default:',
			  '			   	 		return false;',
				'			   }',
				'    }',
				'    private static byte[] Query(string domain)',
				'    {',
				'    		return Storage.Get(Storage.CurrentContext, domain);',
				'    }',
				'    private static bool Register(string domain, byte[] owner, byte[] signature)',
				'    {',
				'    		if (!VerifySignature(owner, signature)) return false;',
				'    		byte[] value = Storage.Get(Storage.CurrentContext, domain);',
				'    		if (value != null) return false;',
				'    		Storage.Put(Storage.CurrentContext, domain, owner);',
				'    		return true;',
				'    }',
				'    private static bool Transfer(string domain, byte[] signature_from, byte[] to, byte[] signature_to)',
				'    {',
				'    		if (!VerifySignature(to, signature_to)) return false;',
				'    		byte[] from = Storage.Get(Storage.CurrentContext, domain);',
				'    		if (from == null) return false;',
				'    		if (!VerifySignature(from, signature_from)) return false;',
				'    		Storage.Put(Storage.CurrentContext, domain, to);',
				'    		return true;',
				'    }',
				'    private static bool Delete(string domain, byte[] signature)',
				'    {',
				'    		byte[] owner = Storage.Get(Storage.CurrentContext, domain);',
				'    		if (owner == null) return false;',
				'    		if (!VerifySignature(owner, signature)) return false;',
				'    		Storage.Delete(Storage.CurrentContext, domain);',
				'    		return true;',
				'    }',
				'}',
		].join('\n'),
	},
	{
		name: "AgencyTransaction",
		context: [
				'using AntShares.SmartContract.Framework;',
				'using AntShares.SmartContract.Framework.Services.AntShares;',
				'using AntShares.SmartContract.Framework.Services.System;',
				'using System.Numerics;',
				'',
				'public class AgencyTransaction : FunctionCode',
				'{',
				'     public static bool Main(byte[] agent, byte[] assetId, byte[] valueId, byte[] client, bool way, BigInteger price, byte[] signature)',
				'     {',
				'        if (VerifySignature(client, signature)) return true;',
				'			   if (!VerifySignature(agent, signature)) return false;',
		    '			   byte[] inputId, outputId;',
				'			   if (way)',
				'			   {',
			  '			   	 	inputId = assetId;',
				'			   	  outputId = valueId;',
			  '			   }',
				'			   else',
			  '			   {',
				'			   	  inputId = valueId;',
			  '			   	 	outputId = assetId;',
				'			   }',
				'			   BigInteger inputSum = 0, outputSum = 0;',
				'			   TransactionOutput[] references = ((Transaction)ExecutionEngine.ScriptContainer).GetReferences();',
				'			   foreach (TransactionOutput reference in references)',
				'			   {',
				'			   		if (reference.ScriptHash.Equals(ExecutionEngine.EntryScriptHash))',
				'			   		{',
				'			   			if (!reference.AssetId.Equals(inputId))',
				'			   				return false;',
				'			   			else',
				'			   			inputSum += reference.Value;',
				'			   		}',
				'			   	}',
				'			   	TransactionOutput[] outputs = ((Transaction)ExecutionEngine.ScriptContainer).GetOutputs();',
				'			   	foreach (TransactionOutput output in outputs)',
				'			   	{',
				'			   		if (output.ScriptHash.Equals(ExecutionEngine.EntryScriptHash))',
				'			   		{',
				'			   			if (output.AssetId.Equals(inputId))',
				'			   				inputSum -= output.Value;',
				'			   			else if (output.AssetId.Equals(outputId))',
				'			   				outputSum += output.Value;',
				'           }',
				'         }',
				'         if (inputSum <= 0) return true;',
				'         if (way)',
				'         {',
				'         	if (outputSum * 100000000 < inputSum * price) return false;',
				'         }',
				'         else',
				'         {',
				'         	if (inputSum * 100000000 > outputSum * price) return false;',
				'         }',
				'         return true;',
				'    }',
				'}',
		].join('\n')
	}],"java": [{
		name: "Example",
		context: [
        'package hi;',
        'import AntShares.SmartContract.Framework.FunctionCode;',
        'public class go extends FunctionCode {',
        '    public static int Main() ',
        '    {',
        '        return 1;',
        '    }',
        '}',
    ].join('\n')
	}]
}
